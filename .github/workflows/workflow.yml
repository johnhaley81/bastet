name: CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  release:
    types: [published]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - macos-latest
        ocaml-version:
          - 5.3.x

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y bubblewrap g++-multilib gcc-multilib mercurial musl-tools rsync

      - name: Set up OCaml ${{ matrix.ocaml-version }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-version }}
          dune-cache: true
          opam-disable-sandboxing: true

      - name: Install dependencies
        run: |
          opam pin add mel-bastet.dev . --no-action
          opam install . --deps-only --with-test

      - name: Build
        run: opam exec -- dune build @install

      - name: Lint opam file
        run: opam lint mel-bastet.opam

      - name: Run tests
        run: opam exec -- dune runtest

  deploy:
    needs: test
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' || (github.event_name == 'release' && github.event.action == 'published')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bubblewrap g++-multilib gcc-multilib mercurial musl-tools rsync

      - name: Set up OCaml 5.3.x
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: 5.3.x
          dune-cache: true
          opam-disable-sandboxing: true

      - name: Install opam-publish
        run: opam install opam-publish

      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Publish to opam (dry run)
        if: github.event_name != 'release'
        run: |
          echo "Dry run: Testing opam file validation"
          opam lint mel-bastet.opam
          echo "Opam file is valid for publishing"

      - name: Setup GitHub token for opam-publish
        if: github.event_name == 'release' && github.event.action == 'published' && secrets.OPAM_PUBLISH_TOKEN
        env:
          OPAM_PUBLISH_TOKEN: ${{ secrets.OPAM_PUBLISH_TOKEN }}
        run: |
          mkdir -p ~/.opam/plugins/opam-publish
          echo -n "$OPAM_PUBLISH_TOKEN" > ~/.opam/plugins/opam-publish/github-actions.token

      - name: Publish to opam (release)
        if: github.event_name == 'release' && github.event.action == 'published' && secrets.OPAM_PUBLISH_TOKEN
        env:
          OPAM_PUBLISH_TOKEN: ${{ secrets.OPAM_PUBLISH_TOKEN }}
        run: |
          opam publish --no-confirmation --tag=${{ github.ref_name }} .

      - name: Manual publishing instructions
        if: github.event_name == 'release' && github.event.action == 'published' && !secrets.OPAM_PUBLISH_TOKEN
        run: |
          echo "✅ Release v${{ github.ref_name }} is ready for opam publishing!"
          echo ""
          echo "⚠️  No OPAM_PUBLISH_TOKEN secret found. To enable automated publishing:"
          echo "1. Create a Personal Access Token with 'public_repo' scope"
          echo "2. Add it as a repository secret named 'OPAM_PUBLISH_TOKEN'"
          echo ""
          echo "Or publish manually with:"
          echo "  opam publish --tag=${{ github.ref_name }} ."
